package io.github.uharaqo.epoque.impl

import arrow.core.right
import io.github.uharaqo.epoque.api.CommandOutput
import io.github.uharaqo.epoque.api.EventWriter
import io.github.uharaqo.epoque.api.Version
import io.github.uharaqo.epoque.api.VersionedEvent
import io.github.uharaqo.epoque.impl.TestEnvironment.TestCommand.Create
import io.kotest.assertions.arrow.core.rethrow
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import io.mockk.coEvery
import io.mockk.mockk
import io.mockk.slot

class CommandExecutorSpec : StringSpec(
  {
    "events generated by a command are written and returned properly" {
      // given
      val eventWriter = mockk<EventWriter>()
      val slot = slot<CommandOutput>()
      coEvery { eventWriter.writeEvents(capture(slot), any()) } returns Unit.right()

      val dummyCommandExecutor = dummyCommandExecutor(eventWriter)

      // when
      val output = dummyCommandExecutor.execute(Create("Whatever"), dummyCommandContext).rethrow()

      // then
      output.events shouldBe slot.captured.events
      output.events shouldBe listOf(
        VersionedEvent(Version(3), dummyEventType, serializedEvent1),
        VersionedEvent(Version(4), dummyEventType, serializedEvent2),
      )
    }
  },
) {
  companion object : TestEnvironment()
}
